@inject IJSRuntime JS

<div class="form-inline">
    <label class="my-1 mr-2" for="amount-of-guids-input">Amount of GUID's:</label>
    <input type="number" class="form-control my-1 mr-sm-2" id="amount-of-guids-input" min="0" step="1"
        @bind="AmountOfGuids" @bind:event="oninput">
</div>
<div class="form-group">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="uppercase-checkbox" @bind="makeGuidsUpperCase">
        <label class="form-check-label" for="uppercase-checkbox">
            UPPERCASE
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="braces-checkbox" @bind="includeBracesForGuids">
        <label class="form-check-label" for="braces-checkbox">
            Braces {...}
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="hyphens-checkbox" @bind="includeHyphensForGuids">
        <label class="form-check-label" for="hyphens-checkbox">
            Hyphens ...-...-...-...-...
        </label>
    </div>
</div>
<button type="button" class="btn btn-primary" @onclick="RefreshGuids">Refresh GUID's</button>
<button type="button" class="btn btn-light" onclick="copyGuids()">Copy GUID's</button>
<br>
<pre id="guid-container">
@foreach (var guid in guids)
{
@FormatGuid(guid)
}
</pre>

@code{
    private int amountOfGuids = 1;
    private int AmountOfGuids
    {
        get
        {
            return amountOfGuids;
        }
        set
        {
            amountOfGuids = value;
            AmountOfGuidsChanged();
        }
    }

    private List<Guid> guids = new List<Guid>() { Guid.NewGuid() };
    private bool makeGuidsUpperCase = false;
    private bool includeBracesForGuids = true;
    private bool includeHyphensForGuids = true;

    private string FormatGuid(Guid guid)
    {
        var output = guid.ToString();
        if (makeGuidsUpperCase)
        {
            output = output.ToUpper();
        }

        if (includeBracesForGuids)
        {
            output = $"{{{output}}}";
        }

        if (!includeHyphensForGuids)
        {
            output = output.Replace("-", "");
        }

        return $"{output}\n";
    }

    private void AmountOfGuidsChanged()
    {
        if (amountOfGuids < 0)
        {
            guids.Clear();
            return;
        }

        if (guids.Count == amountOfGuids)
        {
            return;
        }

        if (guids.Count > amountOfGuids)
        {
            guids = guids.Take(amountOfGuids).ToList();
            return;
        }

        var amountOfNewGuids = amountOfGuids - guids.Count;
        for (int i = 0; i < amountOfNewGuids; i++)
        {
            guids.Add(Guid.NewGuid());
        }
    }

    private void RefreshGuids()
    {
        for (int i = 0; i < guids.Count; i++)
        {
            guids[i] = Guid.NewGuid();
        }
    }
}